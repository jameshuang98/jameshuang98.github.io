{"status":"ok","feed":{"url":"https://medium.com/feed/@jameshuang337","title":"Stories by James Huang on Medium","link":"https://medium.com/@jameshuang337?source=rss-ef0b325ff475------2","author":"","description":"Stories by James Huang on Medium","image":"https://cdn-images-1.medium.com/fit/c/150/150/0*SWXWxivAcGsxDOnf"},"items":[{"title":"An Introduction to Linked Lists","pubDate":"2022-02-07 07:19:43","link":"https://medium.com/@jameshuang337/an-introduction-to-linked-lists-9edc2dcffe59?source=rss-ef0b325ff475------2","guid":"https://medium.com/p/9edc2dcffe59","author":"James Huang","thumbnail":"https://cdn-images-1.medium.com/proxy/0*MfHJF77iXN_S3KCa","description":"\n<p>As a developer, one common data structure that is a must-know is the linked list. Fundamentally, a linked list is a data structure that consists of a linear series of connected data elements. Unlike an array, whose elements are determined by their sequential position at a contiguous memory location, elements of a linked list can be stored anywhere in memory. In other words, the order of these elements are not determined by their physical position in memory. Instead, each data element, often referred to as a <em>node</em>, will have a reference (pointer) to the location of the next node in the linked\u00a0list.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/proxy/0*MfHJF77iXN_S3KCa\"><figcaption>Example of a singly linked\u00a0list</figcaption></figure><p>This forms a chain of successive nodes that are connected to each other via pointers. The first node, called the <em>head node</em>, will point to the second. The second node will point to the third node, and so forth until we reach the last node, which points to\u00a0null.</p>\n<p>An important distinction to make is that each node will only point to the next node in the list and not to any other node. This is called a <em>singly linked list</em>. A variation of this exists called a <em>doubly linked list</em>, which is practically the same thing, except each node also contains a pointer to the previous node in the list. Two other variations are <em>circular</em> and <em>doubly circular</em> linked lists, but for simplicity, we will focus on the singly linked list in this\u00a0article.</p>\n<p>In its most basic form, each node of a singly linked list consists of two parts: data and a pointer. The data could be a string, integer, object, or anything else you\u2019d like to\u00a0store.</p>\n<p><strong>Arrays vs Linked\u00a0lists</strong></p>\n<p>Earlier, I mentioned how items in arrays are stored differently than nodes in a linked list. In an array, each item is placed side-by-side with each other in a single location in memory. The benefit of this is that accessing an element can be done in constant time, since each item is in a specific order and is\u00a0indexed.</p>\n<p>In the image below, the array is stored at a base address 5000. If we are storing integers, then each index will be 4 bytes. So we can easily calculate the position of, for example, the element indexed at 2 in the array by multiplying the index by 4 bytes and adding the base\u00a0address.</p>\n<pre>5000 + 2*4 = 5008 (position of my_arr[2])</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/487/1*ePrUm1UsNiCXBFROvjcYLA.png\"><figcaption>An array called my_arr at memory address\u00a05000</figcaption></figure><p>On the other hand, nodes in a linked list are stored in arbitrary locations in memory, so we do not have random access to any node within a linked list. Often times, we only have information about where the head node is. So, for example, to reach the 4th element of a linked list, we would need to start at the head node and traverse the linked list until we reach the 4th\u00a0node.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/795/1*j4_5erIgj4GRC2l1MS3h5Q.png\"><figcaption>We would need to traverse from Node1 to Node4 to find the end of the linked\u00a0list</figcaption></figure><p>Therefore, compared to arrays, accessing nodes can be relatively difficult. However, inserting or deleting nodes can be done with ease, assuming we have indexed a pointer to the node location. For example, to add a new node to the start of the list, all we need to do is create a new node that points to the previous \u2018first node\u2019 of the list. Now, we have a new head node of the list. Note that we usually need to update our reference to the head node as\u00a0well.</p>\n<p>In an array, however, adding an element to the beginning of the array would be quite expensive, as it requires shifting all the elements in the array by one index/position.</p>\n<p><strong>Implementation using JavaScript</strong></p>\n<p>We can visualize each node within a linked list with the following Node\u00a0class:</p>\n<pre>class Node {<br>    constructor(value) {<br><strong>this</strong>.data=value;<br>        // Pointer to next node<br><strong>this</strong>.next=<strong>null</strong>;<br>    }<br>}</pre>\n<p>When an instance of the Node class is created, the instance object will be initialized with two properties: data and a\u00a0pointer.</p>\n<p>Now let\u2019s visualize how we would create the following linked\u00a0list.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/333/1*0mYlXO2qBy7bjfRyixA4cA.png\"></figure><p>Using our node class, we could define instance objects that correspond with each node in the linked\u00a0list</p>\n<pre>const nodeA = new Node(6)<br>const nodeB = new Node(43)<br>const nodeC = new Node(76)<br>const nodeD = new Node(89)</pre>\n<pre>nodeA.next = nodeB<br>nodeB.next = nodeC<br>nodeC.next = nodeD</pre>\n<p>This method of creating a linked list works, but it is quite messy and tedious. We have to manually create each node and connect them to the next node as\u00a0well.</p>\n<p>A better way would be to create a LinkedList class and define a method within the class that allows us to add onto the linked\u00a0list.</p>\n<pre>class LinkedList{<br>    constructor(){<br>        this.head = null;<br>        this.tail = null; // it is common to include a pointer to the end of the linked list as well<br>    }</pre>\n<pre>appendNode(value) {<br><em>let</em> newNode = new Node(value);</pre>\n<pre>    if (this.tail) {<br>        this.tail.next = newNode;<br>        this.tail = newNode;<br>        return newNode;<br>    } else {    <br>        this.head = this.tail = newNode;<br>        return newNode;  <br>    }</pre>\n<pre>}</pre>\n<pre>// When the value of tail is null, it means that the linked list is still empty, so you need to assign the newNode object to the head and tail pointers</pre>\n<p>Other common operations on a linked list include deleting a node, inserting a node at the head of the list, finding the length of the list, etc. We will save these for a later\u00a0article.</p>\n<p><strong>Applications</strong></p>\n<p>Although not as common as arrays, linked lists are still valuable as a data structure and are often used when we want efficient insertion or deletion of data. In computer science, stacks and queues are frequently implemented with linked lists. This is because removing the head or tail of a linked list can be done in constant\u00a0time.</p>\n<p>Some real world examples of linked lists include the usage of the <em>previous and next page buttons</em> in the browser, where the previous and next urls are stored as nodes in the linked list. We can also apply this concept to a <em>music player</em>, where the next and previous songs are stored as\u00a0nodes.</p>\n<p><strong>Wrap-up</strong></p>\n<p>That\u2019s all for this article! I hope you found it insightful and please feel free to leave a comment about what data structure I should write about\u00a0next!</p>\n<p>If you wish to learn more about linked lists, make sure to visit the following references:</p>\n<p><a href=\"https://www.geeksforgeeks.org/data-structures/linked-list/\">Linked List Data Structure</a></p>\n<p><a href=\"https://medium.com/basecs/whats-a-linked-list-anyway-part-1-d8b7e6508b9d\">What\u2019s a Linked List,\u00a0Anyway?</a></p>\n<p><a href=\"https://codeburst.io/linked-lists-in-javascript-es6-code-part-1-6dd349c3dcc3\">Linked Lists in JavaScript (ES6\u00a0code)</a></p>\n<p><a href=\"https://www.freecodecamp.org/news/implementing-a-linked-list-in-javascript/\">How to Implement a Linked List in JavaScript</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=9edc2dcffe59\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>As a developer, one common data structure that is a must-know is the linked list. Fundamentally, a linked list is a data structure that consists of a linear series of connected data elements. Unlike an array, whose elements are determined by their sequential position at a contiguous memory location, elements of a linked list can be stored anywhere in memory. In other words, the order of these elements are not determined by their physical position in memory. Instead, each data element, often referred to as a <em>node</em>, will have a reference (pointer) to the location of the next node in the linked\u00a0list.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/proxy/0*MfHJF77iXN_S3KCa\"><figcaption>Example of a singly linked\u00a0list</figcaption></figure><p>This forms a chain of successive nodes that are connected to each other via pointers. The first node, called the <em>head node</em>, will point to the second. The second node will point to the third node, and so forth until we reach the last node, which points to\u00a0null.</p>\n<p>An important distinction to make is that each node will only point to the next node in the list and not to any other node. This is called a <em>singly linked list</em>. A variation of this exists called a <em>doubly linked list</em>, which is practically the same thing, except each node also contains a pointer to the previous node in the list. Two other variations are <em>circular</em> and <em>doubly circular</em> linked lists, but for simplicity, we will focus on the singly linked list in this\u00a0article.</p>\n<p>In its most basic form, each node of a singly linked list consists of two parts: data and a pointer. The data could be a string, integer, object, or anything else you\u2019d like to\u00a0store.</p>\n<p><strong>Arrays vs Linked\u00a0lists</strong></p>\n<p>Earlier, I mentioned how items in arrays are stored differently than nodes in a linked list. In an array, each item is placed side-by-side with each other in a single location in memory. The benefit of this is that accessing an element can be done in constant time, since each item is in a specific order and is\u00a0indexed.</p>\n<p>In the image below, the array is stored at a base address 5000. If we are storing integers, then each index will be 4 bytes. So we can easily calculate the position of, for example, the element indexed at 2 in the array by multiplying the index by 4 bytes and adding the base\u00a0address.</p>\n<pre>5000 + 2*4 = 5008 (position of my_arr[2])</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/487/1*ePrUm1UsNiCXBFROvjcYLA.png\"><figcaption>An array called my_arr at memory address\u00a05000</figcaption></figure><p>On the other hand, nodes in a linked list are stored in arbitrary locations in memory, so we do not have random access to any node within a linked list. Often times, we only have information about where the head node is. So, for example, to reach the 4th element of a linked list, we would need to start at the head node and traverse the linked list until we reach the 4th\u00a0node.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/795/1*j4_5erIgj4GRC2l1MS3h5Q.png\"><figcaption>We would need to traverse from Node1 to Node4 to find the end of the linked\u00a0list</figcaption></figure><p>Therefore, compared to arrays, accessing nodes can be relatively difficult. However, inserting or deleting nodes can be done with ease, assuming we have indexed a pointer to the node location. For example, to add a new node to the start of the list, all we need to do is create a new node that points to the previous \u2018first node\u2019 of the list. Now, we have a new head node of the list. Note that we usually need to update our reference to the head node as\u00a0well.</p>\n<p>In an array, however, adding an element to the beginning of the array would be quite expensive, as it requires shifting all the elements in the array by one index/position.</p>\n<p><strong>Implementation using JavaScript</strong></p>\n<p>We can visualize each node within a linked list with the following Node\u00a0class:</p>\n<pre>class Node {<br>    constructor(value) {<br><strong>this</strong>.data=value;<br>        // Pointer to next node<br><strong>this</strong>.next=<strong>null</strong>;<br>    }<br>}</pre>\n<p>When an instance of the Node class is created, the instance object will be initialized with two properties: data and a\u00a0pointer.</p>\n<p>Now let\u2019s visualize how we would create the following linked\u00a0list.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/333/1*0mYlXO2qBy7bjfRyixA4cA.png\"></figure><p>Using our node class, we could define instance objects that correspond with each node in the linked\u00a0list</p>\n<pre>const nodeA = new Node(6)<br>const nodeB = new Node(43)<br>const nodeC = new Node(76)<br>const nodeD = new Node(89)</pre>\n<pre>nodeA.next = nodeB<br>nodeB.next = nodeC<br>nodeC.next = nodeD</pre>\n<p>This method of creating a linked list works, but it is quite messy and tedious. We have to manually create each node and connect them to the next node as\u00a0well.</p>\n<p>A better way would be to create a LinkedList class and define a method within the class that allows us to add onto the linked\u00a0list.</p>\n<pre>class LinkedList{<br>    constructor(){<br>        this.head = null;<br>        this.tail = null; // it is common to include a pointer to the end of the linked list as well<br>    }</pre>\n<pre>appendNode(value) {<br><em>let</em> newNode = new Node(value);</pre>\n<pre>    if (this.tail) {<br>        this.tail.next = newNode;<br>        this.tail = newNode;<br>        return newNode;<br>    } else {    <br>        this.head = this.tail = newNode;<br>        return newNode;  <br>    }</pre>\n<pre>}</pre>\n<pre>// When the value of tail is null, it means that the linked list is still empty, so you need to assign the newNode object to the head and tail pointers</pre>\n<p>Other common operations on a linked list include deleting a node, inserting a node at the head of the list, finding the length of the list, etc. We will save these for a later\u00a0article.</p>\n<p><strong>Applications</strong></p>\n<p>Although not as common as arrays, linked lists are still valuable as a data structure and are often used when we want efficient insertion or deletion of data. In computer science, stacks and queues are frequently implemented with linked lists. This is because removing the head or tail of a linked list can be done in constant\u00a0time.</p>\n<p>Some real world examples of linked lists include the usage of the <em>previous and next page buttons</em> in the browser, where the previous and next urls are stored as nodes in the linked list. We can also apply this concept to a <em>music player</em>, where the next and previous songs are stored as\u00a0nodes.</p>\n<p><strong>Wrap-up</strong></p>\n<p>That\u2019s all for this article! I hope you found it insightful and please feel free to leave a comment about what data structure I should write about\u00a0next!</p>\n<p>If you wish to learn more about linked lists, make sure to visit the following references:</p>\n<p><a href=\"https://www.geeksforgeeks.org/data-structures/linked-list/\">Linked List Data Structure</a></p>\n<p><a href=\"https://medium.com/basecs/whats-a-linked-list-anyway-part-1-d8b7e6508b9d\">What\u2019s a Linked List,\u00a0Anyway?</a></p>\n<p><a href=\"https://codeburst.io/linked-lists-in-javascript-es6-code-part-1-6dd349c3dcc3\">Linked Lists in JavaScript (ES6\u00a0code)</a></p>\n<p><a href=\"https://www.freecodecamp.org/news/implementing-a-linked-list-in-javascript/\">How to Implement a Linked List in JavaScript</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=9edc2dcffe59\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":["computer-science","linked-lists","data-structures"]}]}